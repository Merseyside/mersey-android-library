plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'com.github.dcendents.android-maven'
}

group='com.github.Merseyside'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
    }

    flavorDimensions "nav"
    defaultPublishConfig "standartRelease"

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        navigation {
            dimension "nav"
            matchingFallbacks = ["navigation"]
        }

        standart {
            dimension "nav"
            matchingFallbacks = ["standart"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }
}

ext {
    material = '1.2.0-alpha05'

    coroutines = '1.3.3'
    appCompat = '1.1.0'
    navigation = '2.3.0-alpha06'

    lifecycleExtensions = '2.2.0'

    workVersion = '2.3.4'

    dagger = '2.27'
    gson = '2.8.6'

    room = '2.0.0'

    keyboard = '2.3.0'
}

dependencies {

    implementation project(':utils')
    implementation project(':adapters')
    implementation project(':animators')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.appcompat:appcompat:$appCompat"

    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleExtensions"

    implementation "androidx.work:work-runtime-ktx:$workVersion"

    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    compileOnly 'javax.annotation:jsr250-api:1.0'

    implementation "com.google.code.gson:gson:$gson"

    implementation "android.arch.persistence.room:rxjava2:$room"
    kapt "android.arch.persistence.room:compiler:$room"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization"

    implementation "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:$keyboard"
}

if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->

        if (variant.name.toLowerCase().contains("debug")) {
            return
        }

        def bundleTask = tasks["bundle${variant.name.capitalize()}Aar"]

        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }

    }
}

afterEvaluate {
    generateNavigationReleaseBuildConfig.enabled = false
    generateStandartReleaseBuildConfig.enabled = false
    generateNavigationDebugBuildConfig.enabled = false
    generateStandartDebugBuildConfig.enabled = false

    kaptNavigationReleaseKotlin.finalizedBy(removeReleaseBuildFiles)
    kaptStandartReleaseKotlin.finalizedBy(removeReleaseBuildFiles)
    kaptNavigationDebugKotlin.finalizedBy(removeDebugBuildFiles)
    kaptStandartDebugKotlin.finalizedBy(removeDebugBuildFiles)
}

task removeReleaseBuildFiles {
    doLast {
        file("$buildDir/generated/source/kapt/release/com/merseyside/merseyLib/DataBinderMapperImpl.java").delete()
        println(file("$buildDir/generated/source/kapt/release/com/merseyside/merseyLib/BR.java").delete())
        println("delete trigger = " + file("$buildDir/generated/data_binding_trigger/release/com/merseyside/merseyLib/DataBindingTriggerClass.java").delete())
    }
}

task removeDebugBuildFiles {
    doLast {
        file("$buildDir/generated/source/kapt/debug/com/merseyside/merseyLib/DataBinderMapperImpl.java").delete()
        println(file("$buildDir/generated/source/kapt/debug/com/merseyside/merseyLib/BR.java").delete())
    }
}